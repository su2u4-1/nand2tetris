class Main{
    
    function void main(){
        var int value;
        do Main.fillMemory(8001, 16,  - 1);
        let value = Memory.peek(8000);
        do Main.convert(value);
        return;
    }
    
    function void convert(int value){
        var int mask, position;
        var boolean loop;
        
        let loop = true;
        while(loop){
            let position = position + 1;
            let mask = Main.nextMask(mask);
            
            if(~(position > 16)){
                
                if(~((value & mask) = 0)){
                    do Memory.poke(8000 + position, 1);
                }
                else{
                    do Memory.poke(8000 + position, 0);
                }
            }
            else{
                let loop = false;
            }
        }
        return;
    }
    
    function int nextMask(int mask){
        if(mask = 0){
            return1;
        }
        else{
            return mask * 2;
        }
    }
    
    function void fillMemory(int address, int length, int value){
        while(length > 0){
            do Memory.poke(address, value);
            let length = length - 1;
            let address = address + 1;
        }
        return;
    }


Class_S
<keyword> class [line: 21]
<identifier> Main [line: 21]
<symbol> { [line: 21]
<keyword> function [line: 27]
Subroutine_S
<keyword> void [line: 27]
<identifier> main [line: 27]
<symbol> ( [line: 27]
ArgumentList_S
<symbol> ) [line: 27]
ArgumentList_E
<symbol> { [line: 27]
<keyword> var [line: 28]
VarDec_S
<keyword> int [line: 28]
<identifier> value [line: 28]
<symbol> ; [line: 28]
VarDec_E
<keyword> do [line: 29]
Statements_S
Do_S
<identifier> Main [line: 29]
<symbol> . [line: 29]
<identifier> fillMemory [line: 29]
<symbol> ( [line: 29]
ExpressionList_S
Expression_S
Term_S
<integer> 8001 [line: 29]
<symbol> , [line: 29]
Term_E
Expression_E
Expression_S
Term_S
<integer> 16 [line: 29]
<symbol> , [line: 29]
Term_E
Expression_E
Expression_S
Term_S
<symbol> - [line: 29]
Term_S
<integer> 1 [line: 29]
<symbol> ) [line: 29]
Term_E
<symbol> ; [line: 29]
Term_E
Expression_E

#Class_S
#Subroutine_S
#ArgumentList_S
#ArgumentList_E
#VarDec_S
#VarDec_E
function Main.main 1
#Statements_S
#Do_S
#ExpressionList_S
#Expression_S
#Term_S
push constant 8001
#Term_E
#Expression_E
#Expression_S
#Term_S
push constant 16
#Term_E
#Expression_E
#Expression_S
#Term_S
#Term_S
push constant 1
#Term_E
not
#Term_E
#Expression_E

