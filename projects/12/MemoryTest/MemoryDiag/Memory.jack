// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {
    static Array m;
    static int start;

    /** Initializes the class. */
    function void init() {
        let m = 0;
        let start = 2050;
        let m[2048] = 31740;
        let m[2049] = -1;
        return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
        return m[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
        let m[address] = value;
        return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {
        var int sp, tu;
        if (size < 1) {
            do Sys.error(5);
            return 0;
        }
        let sp = start;
        let tu = -1;
        while (true) {
            if (m[sp-2] = size) {
                if (~(tu > 0)) {
                    let start = m[sp-1];
                }
                else {
                    let m[tu-1] = m[sp-1];
                }
                return sp;
            }
            if (m[sp-2] > (size+2)) {
                if (~(tu > 0)) {
                    let start = sp+size+2;
                }
                else {
                    let m[tu-1] = sp+size+2;
                }
                let m[sp+size+1] = m[sp-1];
                let m[sp+size] = m[sp-2]-size-2;
                let m[sp-1] = sp+size+2;
                let m[sp-2] = size;
                return sp;
            }
            let tu = sp;
            if (~(m[sp-1] > 0)) {
                return -1;
            }
            let sp = m[sp-1];
        }

    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
        let m[o-1] = start;
        let start = o;
        return;
    }
}
