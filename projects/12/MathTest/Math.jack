// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/** A library of commonly used mathematical functions.
 *  All functions runs in O(n), where n is the number of bits used
 *  for representing a two's complement integer value (16 in the Hack computer). 
 *  Note: Jack compilers implement multiplication and division
 *  using calls to OS functions in this class.
 */
class Math {
    static int n;             // Number of bits used for representing a two's complement integer
    static Array powersOfTwo; // Stores 2^0, 2^1, 2^2,..., 2^(n-1)

    // Initializes the Math library.
    function void init() {
        var int i;
        let i = 0;
        let n = 1;
        let powersOfTwo = Array.new(16);
        while (i < 16) {
            let powersOfTwo[i] = n;
            let n = n + n;
            let i = i + 1;
        }
        return;
    }

    /** Returns the product of x and y. 
     *  When a Jack compiler detects the multiplication operator '*'
     *  in an expression, it handles it by invoking this method.
     *  Thus, in Jack, x * y and Math.multiply(x,y) return the same value.
     */
    function int multiply(int x, int y) {
        var int i, sum;
        let i = 0;
        let sum = 0;
        while (i < 16) {
            if (x & powersOfTwo[i] > 0) {
                let sum = sum + y;
            }
            let y = y + y;
            let i = i + 1;
        }
        return sum;
    }

    /** Returns the integer part of x / y.
     *  When a Jack compiler detects the division operator '/'
     *  an an expression, it handles it by invoking this method.
     *  Thus, x/y and Math.divide(x,y) return the same value.
     */
    function int divide(int x, int y) {
        var int q, t0, t1;
        let t0 = 1;
        if (x < 0) {
            let t0 = -1;
            let x = -x;
        }
        if (y < 0) {
            let t0 = -t0;
            let y = -y;
        }
        if (y = 0) {
            do Sys.error(3);
            return 0;
        }
        if (y > x) {
            return 0;
        }
        let q = Math.divide(x, 2 * y);
        let t1 = 2 * q;
        if (x - (t1 * y) < y) {
            return t0 * t1;
        }
        return t0 * t1 + 1;
    }

    /** Returns the integer part of the square root of x.
    */
    function int sqrt(int x) {
        var int y, j, t;
        if (x < 0) {
            do Sys.error(4);
            return 0;
        }
        if (x < 2) {
            return x;
        }
        let y = 0;
        let j = 7;
        while (~(j < 0)) {
            let t = y + powersOfTwo[j];
            if (~(t * t > x) & (t < 182)) {
                let y = t;
            }
            let j = j - 1;
        }
        return y;
    }

    /** Returns the greater value.
    */
    function int max(int a, int b) {
        if (a > b) {
            return a;
        }
        return b;
    }

    /** Returns the smaller value.
    */
    function int min(int a, int b) {
        if (a < b) {
            return a;
        }
        return b;
    }

    /** Returns the absolute value of x
    */
    function int abs(int x) {
        if (x < 0) {
            return -x;
        }
        return x;
    }
}
